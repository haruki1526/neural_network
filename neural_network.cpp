#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

#define run() ( (double)rand() / RAND_MAX / 1.0)
#define INPUT_LAYER 42 //input_layer number
#define HIDDEN_LAYER 100 //hedden_layer number
#define OUTPUT_LAYER 26 //output_layer number
#define HIDDEN_LAYER_NUM 1
#define N 0.75 //learninig_num
#define ALPHA 0.0
#define LAYER_SUM 3
#define LEARN_SUM 5000
#define NUMBER_SUM 26

//489


double sigmoid(double x)//sigmoid def 
{
	double f;
	f=1.0/(1.0+exp(5.5-x));
	return f;

}

double d_sigmoid(double u)
{
	double f;
	f=sigmoid(u) * (1 - sigmoid(u));

	return f;

}


int main(){
       	double teach_out[NUMBER_SUM][OUTPUT_LAYER]={{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
						    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}};




	
	double teach_input[NUMBER_SUM][INPUT_LAYER]={{0,0,0,1,0,0,
						      0,0,1,0,1,0,
						      0,0,1,0,1,0,
						      0,1,0,0,0,1,
						      0,1,1,1,1,1,
						      0,1,0,0,0,1,
						      0,1,0,0,0,1},

	       					     {0,1,1,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,0,0},
							
					     	     {0,0,0,0,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,0,
						      1,0,0,0,0,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},	
							
						     {0,1,1,0,0,0,
						      0,1,0,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,1,0,0,
						      0,1,1,0,0,0},	
								       
					       	     {0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,1,1,1,0},	
								
						     {0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0},

	       					     {0,0,0,0,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,0,
						      1,0,1,1,1,1,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},
							
					     	     {0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0},	
							
						     {0,1,1,1,1,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,1,1,1,1,0},	
								       
					       	     {1,1,1,1,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},	
							
						     {0,1,0,0,0,1,
						      0,1,0,0,1,0,
						      0,1,0,1,0,0,
						      0,1,1,0,0,0,
						      0,1,1,0,0,0,
						      0,1,0,1,0,0,
						      0,1,0,1,0,0},

	       					     {0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,1,
						      0,1,1,1,1,1},
							
					     	     {0,0,0,0,0,0,
						      1,1,0,0,1,1,
						      1,1,0,0,1,1,
						      1,0,1,1,0,1,
						      1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      1,0,0,0,0,1},
							
						     {0,1,1,0,0,1,
						      0,1,1,0,0,1,
						      0,1,0,1,0,1,
						      0,1,0,0,1,1,
						      0,1,0,0,1,1,
						      0,1,0,0,0,1,
						      0,1,0,0,0,1},
							
					     	     {0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0,
						      0,0,0,0,0,0},
	
								
						     {0,1,1,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0},
							
					     	     {0,0,0,0,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,1,
						      1,0,0,1,0,1,
						      0,1,0,1,1,0,
						      0,0,1,1,1,1},
							
						     {0,1,1,1,1,0,
						      0,1,0,0,0,1,
						      0,1,0,0,0,1,
						      0,1,1,1,1,0,
						      0,1,1,0,0,0,
						      0,1,0,1,0,0,
						      0,1,0,0,1,1},
							
					     	     {0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,0,0,
						      0,0,1,1,0,0,
						      0,0,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},

								       
					       	     {0,0,0,0,0,0,
						      0,1,1,1,1,1,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0},

						     {0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},

						     {1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0,
						      0,0,1,1,0,0,
						      0,0,0,0,0,0},    
							
     						     {0,0,0,0,0,0,
						      0,0,0,0,0,0,
						      0,1,0,0,0,1,
						      0,1,0,1,0,1,
						      0,1,0,1,0,1,
						      0,1,1,0,1,1,
						      0,0,0,0,0,0},

						     {0,0,0,0,0,0,
						      1,0,0,0,0,1,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,1},

						     {0,0,0,0,0,0,
						      1,0,0,0,1,0,
						      0,1,0,1,0,0,
						      0,0,1,0,0,0,
						      0,0,1,0,0,0,
						      0,0,1,0,0,0,
						      0,0,1,0,0,0},  						     
	
						     {0,0,0,0,0,0,
						      1,1,1,1,1,1,
						      0,0,0,0,1,0,
						      0,0,0,1,0,0,
						      0,0,1,0,0,0,
						      0,1,0,0,0,0,
						      1,1,1,1,1,1}};						     
	

	
	double input_layer[NUMBER_SUM][INPUT_LAYER]={{0,0,1,1,0,0,
						      0,0,1,0,1,0,
						      0,0,1,0,1,0,
						      0,1,1,0,0,1,
						      0,1,1,1,1,1,
						      0,1,0,0,0,1,
						      0,1,0,0,0,1},

	       					     {0,1,1,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,0,0},
							
					     	     {0,0,0,0,0,0,
						      0,1,1,1,1,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,0,
						      1,0,0,0,0,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},	
							
						     {0,1,1,0,0,0,
						      0,1,0,1,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,1,0,0,
						      0,1,1,1,0,0},	
								       
					       	     {0,1,1,1,1,1,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,1,1,1,1},	
								
						     {0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,1,1,1,1,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0},

	       					     {0,0,0,0,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,0,
						      1,0,1,1,1,1,
						      0,1,0,0,1,0,
						      0,0,1,1,1,0},
							
					     	     {1,1,1,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0},	
							
						     {0,1,1,1,1,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,1,1,1,0,
						      0,1,1,1,1,0},	
								       
					       	     {1,1,1,1,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,1,0},	
							
						     {0,1,0,0,1,1,
						      0,1,0,0,1,0,
						      0,1,0,1,0,0,
						      0,1,1,0,0,0,
						      0,1,1,0,0,0,
						      0,1,0,1,0,0,
						      0,1,0,1,1,0},

	       					     {0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,1,
						      0,1,0,0,1,1,
						      0,1,1,1,1,1},
							
					     	     {1,0,0,0,0,1,
						      1,1,0,0,1,1,
						      1,1,0,0,1,1,
						      1,0,1,1,0,1,
						      1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      1,0,0,0,0,1},
							
						     {0,1,1,0,0,1,
						      0,1,1,0,0,1,
						      0,1,0,1,0,1,
						      0,1,0,0,1,1,
						      0,1,0,0,1,1,
						      0,1,0,0,1,1,
						      0,1,0,0,1,1},
							
					     	     {0,0,1,1,0,0,
						      0,1,0,0,1,1,
						      1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0,
						      0,0,0,0,0,0},
	
								
						     {0,1,1,1,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,1,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0,
						      0,1,0,0,0,0},
							
					     	     {0,0,0,0,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,1,
						      1,0,0,1,0,1,
						      0,1,0,1,1,1,
						      0,0,1,1,1,1},
							
						     {0,1,1,1,1,0,
						      0,1,0,0,0,1,
						      0,1,0,0,0,1,
						      0,1,1,1,1,0,
						      0,1,1,0,0,0,
						      0,1,0,1,0,1,
						      0,1,0,0,1,1},
							
					     	     {0,0,1,1,0,0,
						      0,1,1,0,1,0,
						      0,1,0,0,0,0,
						      0,0,1,1,0,0,
						      0,0,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0},

								       
					       	     {0,0,0,0,0,0,
						      1,1,1,1,1,1,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0,
						      0,0,0,1,0,0},

						     {0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,1,1,1,1,0},

						     {1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      0,1,0,0,1,0,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0,
						      0,0,1,1,0,0,
						      0,0,1,1,0,0},    
							
     						     {0,0,0,0,0,0,
						      0,0,0,0,0,1,
						      0,1,0,1,0,1,
						      0,1,0,1,0,1,
						      0,1,0,1,0,1,
						      0,1,1,0,1,1,
						      0,0,0,0,0,0},

						     {1,0,0,0,0,1,
						      1,0,0,0,0,1,
						      0,1,0,0,1,0,
						      0,0,1,1,0,0,
						      0,0,1,1,0,0,
						      0,1,0,0,1,0,
						      1,0,0,0,0,1},

						     {1,0,0,0,0,1,
						      1,0,0,0,1,0,
						      0,1,0,1,0,0,
						      0,0,1,0,0,0,
						      0,0,1,0,0,0,
						      0,0,1,0,0,0,
						      0,0,1,0,0,0},  						     
	
						     {1,0,0,0,0,0,
						      1,1,1,1,1,1,
						      0,0,0,0,1,0,
						      0,0,0,1,0,0,
						      0,0,1,0,0,0,
						      0,1,0,0,0,1,
						      1,1,1,1,1,1}};						     
	

				  
		
	double weight[LAYER_SUM][HIDDEN_LAYER][HIDDEN_LAYER];
	double old_weight[LAYER_SUM][HIDDEN_LAYER][HIDDEN_LAYER];
	double h[LAYER_SUM][HIDDEN_LAYER];
	double del_h[LAYER_SUM][HIDDEN_LAYER];
	double old_del_h[LAYER_SUM][HIDDEN_LAYER];



	srand((unsigned)time(NULL));
	int i;
	int j;
	int n;
	int k;
	int l;
	int p;
	double sum;
	
	
	char alphabet[27] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};	
	double x[LAYER_SUM][HIDDEN_LAYER];
	double u[LAYER_SUM][HIDDEN_LAYER];
	double del_weight[LAYER_SUM][HIDDEN_LAYER][HIDDEN_LAYER];
	double old_del_weight[LAYER_SUM][HIDDEN_LAYER][HIDDEN_LAYER];	
	double teach_signal[LAYER_SUM][HIDDEN_LAYER];   

	//given random_num for weight
	for( n=0; n < LAYER_SUM; n++){

		for( i=0; i < HIDDEN_LAYER; i++){
			
			for( j=0; j < HIDDEN_LAYER; j++){
			
	
				weight[n][i][j] = run();
				old_del_weight[n][i][j] = 0;
			}
		}
	}

	for( n=0; n < LAYER_SUM; n++){

		for( i=0; i < HIDDEN_LAYER; i++ ){

			h[n][i] = 0.5;
			old_del_h[n][i] = 0;

		}
	}


	//learnig start
	int oversum;
	l=0;
	while(1){
		l++;
		oversum=0;
		for( p=0; p < NUMBER_SUM; p++){
			
			//printf("%d\n",l);	

			//output by input_layer
			for( i=0; i < INPUT_LAYER; i++){
				x[0][i] = teach_input[p][i];
			}
			
			
			 for( i=0; i < HIDDEN_LAYER; i++){
				       u[1][i] = 0;	
					for( j=0; j < INPUT_LAYER; j++){ ////////////////////////////////////////////
						u[1][i] += weight[1][i][j] * x[0][j];
					}
	
					x[1][i] = sigmoid( u[1][i] - h[1][i] );
	
			}
	

			//output by hidden_layer 	
			for( n=2; n < LAYER_SUM-1; n++){
				for( i=0; i < HIDDEN_LAYER; i++){
				       u[n][i] = 0;	
					for( j=0; j < HIDDEN_LAYER; j++){ ////////////////////////////////////////////
						u[n][i] += weight[n][i][j] * x[n-1][j];
					}
	
					x[n][i] = sigmoid( u[n][i] - h[n][i] );
	
				}
			}
		
			//output by output_layer
			for( i=0; i < OUTPUT_LAYER; i++ ){
				u[LAYER_SUM-1][i] = 0;
				for( j=0; j < HIDDEN_LAYER; j++ ){
					u[LAYER_SUM-1][i] += weight[LAYER_SUM-1][i][j] * x[LAYER_SUM-2][j];

				}
				x[LAYER_SUM-1][i] = sigmoid( u[LAYER_SUM-1][i] - h[LAYER_SUM-1][i] );

		

			}
	
			//teach_signal by output_layer
		
			for( i=0; i < OUTPUT_LAYER; i++ ){
				teach_signal[LAYER_SUM-1][i] = ( teach_out[p][i] - x[LAYER_SUM-1][i] ) * d_sigmoid( u[LAYER_SUM-1][i]);	
			}
		
			//teach_signal by hidden_layer 
		
			for( i=0; i < HIDDEN_LAYER; i++ ){
				sum = 0;
				for( k=0; k < OUTPUT_LAYER; k++ ){
					sum += teach_signal[LAYER_SUM-1][k] * weight[LAYER_SUM-1][k][i];
				}
				
				teach_signal[HIDDEN_LAYER_NUM][i] = d_sigmoid( u[HIDDEN_LAYER_NUM][i] ) * sum; 	
			}	

			for( n=HIDDEN_LAYER_NUM-1; n > 0; n-- ){
	
				for( i=0; i < HIDDEN_LAYER; i++ ){
					sum = 0;
					for( k=0; k < HIDDEN_LAYER; k++ ){
				       		sum += teach_signal[n+1][k] * weight[n+1][k][i];
					}
	
					teach_signal[n][i] = d_sigmoid( u[n][i]	) * sum;
				}
			}
			

			//weight overwrite
		
		
			//weight in output_layer 
		
			for( i=0; i < OUTPUT_LAYER; i++ ){
				for( j=0; j < HIDDEN_LAYER; j++ ){
					
					del_weight[LAYER_SUM-1][i][j] = N * teach_signal[LAYER_SUM-1][i] * x[HIDDEN_LAYER][j] + ALPHA * old_del_weight[LAYER_SUM-1][i][j];
					old_del_weight[LAYER_SUM-1][i][j] = del_weight[LAYER_SUM-1][i][j];
	
					weight[LAYER_SUM-1][i][j] += del_weight[LAYER_SUM-1][i][j];   //output_layer weight update
				}
			}
		

		
			//weight update in hidden_layer
		
			for( n=1; n < LAYER_SUM-1; n++ ){
			       for(i=0; i < HIDDEN_LAYER; i++ ){
				       for( j=0; j < HIDDEN_LAYER; j++ ){
					        del_weight[n][i][j] = N * teach_signal[n][i] * x[n-1][j] + ALPHA * old_del_weight[n][i][j];
					        old_del_weight[n][i][j] = del_weight[n][i][j];
						weight[n][i][j] += del_weight[n][i][j];   	//hidden_layer weight update
				       }
			       }
			}
		

		
			//threshould overwrite
		
			//threshould update in output_layer 	
			for( i=0; i < OUTPUT_LAYER; i++ ){
			
				del_h[LAYER_SUM-1][i] = N * teach_signal[LAYER_SUM-1][i] + ALPHA * old_del_h[LAYER_SUM-1][i];
				old_del_h[LAYER_SUM-1][i] = del_h[LAYER_SUM-1][i];
				h[LAYER_SUM-1][i] += del_h[LAYER_SUM-1][i];
			}


			for( n=1; n < LAYER_SUM-1; n++ ){

				for( i=0; i < HIDDEN_LAYER; i++ ){

					del_h[n][i] = N * teach_signal[n][i] + ALPHA * old_del_h[n][i];
					old_del_h[n][i] = del_h[n][i];
					h[n][i] += del_h[n][i];

				}
			}

				
		}
		if(l == LEARN_SUM)break;

	
			
	}


	printf("learned successflly\n");

	printf("  A    B    C    D    E    F    G    H    I    J    K    L    M    N    O    P    Q    R    S    T    U    V    W    X    Y    Z \n");
	//test run
	for(p=0; p < NUMBER_SUM; p++){
		for( i=0; i < INPUT_LAYER; i++){
			x[0][i] = input_layer[p][i];
		}


		 for( i=0; i < HIDDEN_LAYER; i++){
			       u[1][i] = 0;	
				for( j=0; j < INPUT_LAYER; j++){ ////////////////////////////////////////////
					u[1][i] += weight[1][i][j] * x[0][j];
				}

				x[1][i] = sigmoid( u[1][i] - h[1][i] );
	
		}
	

		
		//output by hidden_layer 	
		for( n=2; n < LAYER_SUM-1; n++){
			for( i=0; i < HIDDEN_LAYER; i++){
		      		u[n][i] = 0;	
				for( j=0; j < HIDDEN_LAYER; j++){
					u[n][i] += weight[n][i][j] * x[n-1][j];
				}

				x[n][i] = sigmoid( u[n][i] - h[n][i] );


			}
		}
		
		//output by output_layer
		for( i=0; i < OUTPUT_LAYER; i++ ){
			u[LAYER_SUM-1][i] = 0;
			for( j=0; j < HIDDEN_LAYER; j++ ){
				u[LAYER_SUM-1][i] += weight[LAYER_SUM-1][i][j] * x[LAYER_SUM-2][j];
	
			}
			x[LAYER_SUM-1][i] = sigmoid( u[LAYER_SUM-1][i] - h[LAYER_SUM-1][i] );

		

		}
	
	


		printf("%c ",alphabet[p]);

		for( i=0; i < OUTPUT_LAYER; i++ ){
			printf("%.2f ",x[LAYER_SUM-1][i] );
	
		}
		printf("\n");


	}
}
